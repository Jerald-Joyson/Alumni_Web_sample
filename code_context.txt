// File: app/authentication/admin_login/page.tsx
"use client";
import { useEffect, useState } from "react";
import { useSignInWithEmailAndPassword } from "react-firebase-hooks/auth";
import { auth } from "../../backend/firebase/config";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function Login() {
  // Define the type for errors state
  interface Errors {
    email?: string;
    password?: string;
    general?: string;
  }

  // State variables for input values and errors
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [errors, setErrors] = useState<Errors>({});
  const [user, setUser] = useState(null);

  const [signInWithEmailAndPassword] = useSignInWithEmailAndPassword(auth);
  const router = useRouter();

  useEffect(() => {
    if (user) {
      localStorage.setItem("admin", JSON.stringify(user));
      setEmail("");
      setPassword("");
      router.push("/screens/main_admin_screen");
    }
  }, [user]);
  const handleSignIn = async () => {
    if (email.slice(-6) === ".admin") {
      const value = email.slice(0, -6);
      try {
        const res = await signInWithEmailAndPassword(value, password);
        if (res.user) {
          console.log(res.user);
          setUser(res.user);
          setEmail("");
          setPassword("");
        } else {
          setErrors((prevErrors) => ({
            ...prevErrors,
            general: "Something went wrong",
          }));
        }
      } catch (e) {
        setErrors((prevErrors) => ({ ...prevErrors, general: e.message }));
      }
    } else {
      setErrors((prevErrors) => ({ ...prevErrors, general: "Unknown Admin....!" }));
    }
  };

  const validateEmail = (email: string) => {
    const re = /\S+@\S+\.\S+/;
    return re.test(email);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newErrors: Errors = {};

    if (!validateEmail(email)) {
      newErrors.email = "Invalid email address";
    }
    if (password.length < 6) {
      newErrors.password = "Password must be at least 6 characters long";
    }
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }
    handleSignIn();
  };

  return (
    <div className="bg-[#edeced] h-screen flex justify-center items-center ">
      <div className="bg-white w-[560px] rounded-xl p-4 flex flex-col justify-center items-center">
        <div className="flex flex-col justify-center items-center">
          <h1 className=" font-bold text-3xl mt-5 text-blue-700 ">
            ADMIN LOGIN
          </h1>
          <div className="block w-auto h-auto mb-4 mt-5">
            <input
              type="email"
              placeholder="UserName"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="border-2 border-black p-3 rounded-xl w-[400px]"
            />
            {errors.email && (
              <p className="text-red-600 text-left">{errors.email}</p>
            )}
          </div>
          <div className="block w-auto h-auto mb-4">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="border-2 border-black p-3 rounded-xl w-[400px]"
            />
            {errors.password && (
              <p className="text-red-600 text-left">{errors.password}</p>
            )}
          </div>
        </div>

        <button
          onClick={handleSubmit}
          className="mt-5 h-[50px] w-[400px] bg-blue-700 p-2 rounded-xl text-white font-bold mb-1"
        >
          <h1 className="text-2xl font-bold">Login </h1>
        </button>
        {errors.general && (
          <p className="text-red-600 text-left mt-4">{errors.general}</p>
        )}
      </div>
    </div>
  );
}

// File: app/authentication/login/page.tsx
"use client";
import { useContext, useEffect, useState } from "react";
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "../../backend/firebase/config";
import { useRouter } from "next/navigation";
// import { AuthContext } from "../../backend/AuthContext";
import Link from "next/link";

const Login = () => {
  // Define the type for errors state
  interface Errors {
    email?: string;
    password?: string;
    general?: string;
  }
  // const { dispatch } = useContext(AuthContext);

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [errors, setErrors] = useState<Errors>({});
  const [user, setUser] = useState(null);

  const router = useRouter();

  useEffect(() => {
    if (user) {
      sessionStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("user", JSON.stringify(user));
      setEmail("");
      setPassword("");
      router.push("/screens/main_home_screen");
    }
  }, [user]);

  const handleSignIn = async () => {
    try {
      signInWithEmailAndPassword(auth, email, password)
        .then((userCredential) => {
          const user = userCredential.user;
          // dispatch({ type: "LOGIN", payload: user });
          console.log(user);
          setUser(user);
        })
        .catch((error) => {
          console.log(error);
          setErrors((prevErrors) => ({
            ...prevErrors,
            general: error.message,
          }));
        });
    } catch (e) {
      setErrors((prevErrors) => ({ ...prevErrors, general: e.message }));
    }
  };

  const validateEmail = (email: string) => {
    const re = /\S+@\S+\.\S+/;
    return re.test(email);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newErrors: Errors = {};

    if (!validateEmail(email)) {
      newErrors.email = "Invalid email address";
    }
    if (password.length < 6) {
      newErrors.password = "Password must be at least 6 characters long";
    }
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }
    handleSignIn();
  };

  return (
    <div className="bg-[#edeced] h-screen flex justify-center items-center ">
      <div className="bg-white w-[560px] rounded-xl p-4 flex flex-col justify-center items-center">
        <div className="flex flex-col justify-center items-center">
          <h1 className=" font-bold text-3xl mt-5 text-blue-700 ">LOGIN</h1>
          <div className="block w-auto h-auto mb-4 mt-5">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="border-2 border-black p-3 rounded-xl w-[400px]"
            />
            {errors.email && (
              <p className="text-red-600 text-left">{errors.email}</p>
            )}
          </div>
          <div className="block w-auto h-auto mb-4">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="border-2 border-black p-3 rounded-xl w-[400px]"
            />
            {errors.password && (
              <p className="text-red-600 text-left">{errors.password}</p>
            )}
          </div>
        </div>
        <div className="flex justify-between w-[400px] p-1 mt-3 mb-8">
          <div className="flex gap-3">
            <input
              type="checkbox"
              className="w-5"
              checked={rememberMe}
              onChange={(e) => setRememberMe(e.target.checked)}
            />
            <p className="text-[20px] font-semibold">Remember me</p>
          </div>
          <p className="text-[16px] font-semibold">Forgot password?</p>
        </div>

        <button
          onClick={handleSubmit}
          className="mt-5 h-[50px] w-[400px] bg-blue-700 p-2 rounded-xl text-white font-bold mb-1"
        >
          <h1 className="text-2xl font-bold">Login </h1>
        </button>
        {errors.general && (
          <p className="text-red-600 text-left mt-4">{errors.general}</p>
        )}

        <div className="flex justify-start w-[400px] p-1 mb-6">
          <p className="text-[16px] font-normal">Don't have an account? </p>
          <Link href="/authentication/register">
            <p className="text-[16px] font-semibold text-blue-700 ml-2">
              Register
            </p>
          </Link>
        </div>
      </div>
    </div>
  );
};
export default Login;

// File: app/authentication/register/page.jsx
"use client";
import { useEffect, useState } from "react";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth, db, storage } from "../../backend/firebase/config";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { doc, setDoc, serverTimestamp } from "firebase/firestore";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { userInputs } from "../../constants/formSource";

export default function Register() {
  const [data, setData] = useState({
    firstname: "",
    lastname: "",
    email: "",
    phone: "",
    password: "",
    repeatPassword: "",
    dateOfBirth: "",
    gender: "",
    course: "",
    batch: "",
    connectedTo: "",
    address: "",
  });
  const [errors, setErrors] = useState({});
  const router = useRouter();

  const [file, setFile] = useState(null);
  const [per, setPerc] = useState(null);

  useEffect(() => {
    const uploadFile = () => {
      const fileName = new Date().getTime() + file.name;
      console.log(fileName);
      const storageRef = ref(storage, fileName);
      console.log(storageRef);
      const uploadTask = uploadBytesResumable(storageRef, file);

      uploadTask.on(
        "state_changed",
        (snapshot) => {
          const progress =
            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          setPerc(progress);
          switch (snapshot.state) {
            case "paused":
              console.log("Upload is paused");
              break;
            case "running":
              console.log("Upload is running");
              break;
            default:
              break;
          }
        },
        (error) => {
          console.error(error);
        },
        () => {
          getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
            setData((prev) => ({ ...prev, img: downloadURL }));
            console.log("File available at", downloadURL);
          });
        }
      );
    };

    if (file) {
      uploadFile();
    }
  }, [file]);

  const handleInput = (e) => {
    const { id, value } = e.target;
    setData((prev) => ({ ...prev, [id]: value }));
  };

  const validateForm = () => {
    const newErrors = {};

    if (!data.email) {
      newErrors.email = "Email is required";
    }

    if (!data.password) {
      newErrors.password = "Password is required";
    } else if (data.password !== data.repeatPassword) {
      newErrors.repeatPassword = "Passwords do not match";
    }

    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validateForm();

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
    } else {
      try {
        const res = await createUserWithEmailAndPassword(
          auth,
          data.email,
          data.password
        );
        await setDoc(doc(db, "users", res.user.uid), {
          ...data,
          timestamp: serverTimestamp(),
        });
        resetForm();
        router.push("/authentication/login");
      } catch (e) {
        console.error(e);
      }
    }
  };

  const resetForm = () => {
    setData({
      firstname: "",
      lastname: "",
      email: "",
      phone: "",
      password: "",
      repeatPassword: "",
      dateOfBirth: "",
      gender: "",
      course: "",
      batch: "",
      connectedTo: "",
      address: "",
    });
    setFile(null);
    setPerc(null);
  };

  return (
    <div className="bg-[#edeced] h-screen flex flex-col justify-center items-center">
      <div className="bg-white w-auto h-auto rounded-xl p-4 flex flex-col justify-center items-center">
        <div className="flex flex-col justify-center items-center">
          <h1 className="font-bold text-3xl mt-5 text-blue-700">REGISTER</h1>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mt-7">
            {userInputs.map((input) => (
              <div key={input.id} className="w-full block h-full">
                {input.type === "select" ? (
                  <div>
                    <select
                      id={input.id}
                      value={data[input.id]}
                      onChange={handleInput}
                      className="border-2 border-black p-[14px] rounded-xl w-full bg-white"
                    >
                      {input.options.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>
                ) : input.type === "textarea" ? (
                  <div className="block w-full h-full">
                    <textarea
                      id={input.id}
                      placeholder={input.placeholder}
                      value={data[input.id]}
                      onChange={handleInput}
                      className="border-2 border-black p-3 rounded-xl w-full"
                    />
                  </div>
                ) : (
                  <div>
                    <input
                      id={input.id}
                      type={input.type}
                      placeholder={input.placeholder}
                      value={data[input.id]}
                      onChange={handleInput}
                      className="border-2 border-black p-3 rounded-xl w-full"
                    />
                  </div>
                )}
                {errors[input.id] && (
                  <p className="text-red-600 text-left">{errors[input.id]}</p>
                )}
              </div>
            ))}
            <div className="block w-full h-full col-span-2">
              <input
                type="file"
                id="file"
                onChange={(e) => setFile(e.target.files[0])}
                className="border-2 border-black p-3 rounded-xl w-full"
              />
              {errors.file && (
                <p className="text-red-600 text-left">{errors.file}</p>
              )}
            </div>
            <div className="block w-full h-full">
              {file && (
                <img
                  src={URL.createObjectURL(file)}
                  className="w-[100px] h-[100px] mx-3"
                  alt="User Upload"
                />
              )}
            </div>
          </div>
        </div>
        <button
          onClick={handleSubmit}
          disabled={per !== null && per < 100}
          className={`mt-5 h-[50px] w-[400px] ${
            per !== null && per < 100 ? "bg-blue-200" : "bg-blue-700"
          } p-2 rounded-xl text-white font-bold mb-1`}
          style={{
            cursor: per !== null && per < 100 ? "not-allowed" : "pointer",
          }}
        >
          <h1 className="text-2xl font-bold">Register</h1>
        </button>
        <div className="flex justify-start w-[400px] p-1 mb-6">
          <p className="text-[16px] font-normal">Already have an account?</p>
          <Link href="/authentication/login">
            <p className="text-[16px] font-semibold text-blue-700 ml-2">
              Login
            </p>
          </Link>
        </div>
      </div>
    </div>
  );
}

// File: app/backend/AuthContext.js
import { createContext, useEffect, useReducer } from "react";
import AuthReducer from "./AuthReducer";

const INITIAL_STATE = {
  currentUser: null,
};

if (typeof window !== "undefined") {
  INITIAL_STATE.currentUser = JSON.parse(localStorage.getItem("user")) || null;
}

export const AuthContext = createContext(INITIAL_STATE);

export const AuthContextProvider = ({ children }) => {
  const [state, dispatch] = useReducer(AuthReducer, INITIAL_STATE);

  useEffect(() => {
    localStorage.setItem("user", JSON.stringify(state.currentUser));
  }, [state.currentUser]);

  return (
    <AuthContext.Provider
      value={{
        currentUser: state.currentUser,
        dispatch,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

// File: app/backend/AuthReducer.js
const AuthReducer = (state, action) => {
  switch (action.type) {
    case "LOGIN":
      return {
        currentUser: action.payload,
      };
    case "LOGOUT":
      return {
        currentUser: null,
      };
    default:
      return state;
  }
};
export default AuthReducer;

// File: app/backend/firebase/config.ts
// Import the functions you need from the SDKs you need

import { initializeApp, getApps, getApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";
import { getDatabase } from "firebase/database";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

// Check if a Firebase app has already been initialized; if not, initialize a new one
const app = getApps().length ? getApp() : initializeApp(firebaseConfig);

// Get Firebase Auth instance
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);
const database = getDatabase(app);

export { app, auth, db, storage, database };

// File: app/components/adminAlumniList/data.js
const data = [
    {
      id: 1,
      avatar: "https://via.placeholder.com/50",
      name: "John Doe",
      passoutYear: 2020,
      email: "john.doe@example.com",
      gender: "Male",
      verified: true,
    },
    {
      id: 2,
      avatar: "https://via.placeholder.com/50",
      name: "Jane Smith",
      passoutYear: 2018,
      email: "jane.smith@example.com",
      gender: "Female",
      verified: false,
    },
  ];
  
  export default data;
  
// File: app/components/adminAlumniList/page.tsx
"use client";
import React, { useState, useEffect } from "react";
import { collection, doc, getDocs, setDoc } from "firebase/firestore";
import { db } from "../../backend/firebase/config"; // Adjust the import path as necessary

const AlumniList = () => {
  // Define state variables for alumni list
  const [alumniList, setAlumniList] = useState([]);
  const [selectedAlumni, setSelectedAlumni] = useState(null);

  // Fetch alumni data from Firestore
  useEffect(() => {
    const fetchData = async () => {
      let list = [];
      try {
        const querySnapshot = await getDocs(collection(db, "users"));
        querySnapshot.forEach((doc) => {
          const data = doc.data();
          list.push({
            id: doc.id,
            avatar: data.img || "https://via.placeholder.com/50",
            name: `${data.firstname} ${data.lastname}`,
            passoutYear: data.batch,
            email: data.email,
            gender: data.gender,
            verified: data.verified || false,
          });
        });
        setAlumniList(list);
      } catch (e) {
        console.log(e);
      }
    };
    fetchData();
  }, []);

  // Function to handle view action
  const handleViewAlumni = (index) => {
    setSelectedAlumni(alumniList[index]);
  };

  // Function to handle close modal
  const handleClose = () => {
    setSelectedAlumni(null);
  };

  // Function to handle verify action
  const handleVerify = async () => {
    if (selectedAlumni) {
      const selectedAlumniDocRef = doc(db, "users", selectedAlumni.id);
      try {
        await setDoc(selectedAlumniDocRef, { verified: true }, { merge: true });
        const updatedAlumniList = alumniList.map((alumni) =>
          alumni.id === selectedAlumni.id
            ? { ...alumni, verified: true }
            : alumni
        );
        setAlumniList(updatedAlumniList);
        setSelectedAlumni(null);
      } catch (e) {
        console.log(e);
      }
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl font-semibold mb-4 text-center">Alumni List</h2>
      <table className="min-w-full bg-white border">
        <thead>
          <tr>
            <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
              No
            </th>
            <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
              Avatar
            </th>
            <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
              Name
            </th>
            <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
              Passout Year
            </th>
            <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
              Status
            </th>
            <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
              Action
            </th>
          </tr>
        </thead>
        <tbody>
          {alumniList.map((alumni, index) => (
            <tr key={alumni.id}>
              <td className="px-6 py-4 border-b border-gray-300">
                {index + 1}
              </td>
              <td className="px-6 py-4 border-b border-gray-300">
                <img
                  src={alumni.avatar}
                  alt={alumni.name}
                  className="h-10 w-10 rounded-full"
                />
              </td>
              <td className="px-6 py-4 border-b border-gray-300">
                {alumni.name}
              </td>
              <td className="px-6 py-4 border-b border-gray-300">
                {alumni.passoutYear}
              </td>
              <td className="px-6 py-4 border-b border-gray-300">
                {alumni.verified ? "Verified" : "Not Verified"}
              </td>
              <td className="px-6 py-4 border-b border-gray-300">
                <button
                  className="bg-blue-500 text-white px-2 py-1 rounded"
                  onClick={() => handleViewAlumni(index)}
                >
                  View
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {selectedAlumni && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-4 rounded shadow-lg w-1/2">
            <h2 className="text-2xl font-semibold mb-4">Bio</h2>
            <div className="flex items-center">
              <img
                src={selectedAlumni.avatar}
                alt={selectedAlumni.name}
                className="h-20 w-20 rounded-full mr-4"
              />
              <div className="flex-1">
                <p>
                  <strong>Name:</strong> {selectedAlumni.name}
                </p>
                <p>
                  <strong>Email:</strong> {selectedAlumni.email}
                </p>
                <p>
                  <strong>Batch:</strong> {selectedAlumni.passoutYear}
                </p>
              </div>
              <div className="flex-1">
                <p>
                  <strong>Gender:</strong> {selectedAlumni.gender}
                </p>
                <p>
                  <strong>Account Status:</strong>{" "}
                  {selectedAlumni.verified ? "Verified" : "Not Verified"}
                </p>
              </div>
            </div>
            <div className="flex justify-end mt-4">
              {!selectedAlumni.verified && (
                <button
                  className="bg-green-500 text-white px-4 py-2 rounded mr-2"
                  onClick={handleVerify}
                >
                  Verify
                </button>
              )}
              <button
                className="bg-red-500 text-white px-4 py-2 rounded"
                onClick={handleClose}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AlumniList;

// File: app/components/adminEvents/page.jsx
"use client";
import React, { useState, useEffect } from "react";
import {
  collection,
  addDoc,
  getDocs,
  updateDoc,
  doc,
  deleteDoc,
} from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { db, storage } from "../../backend/firebase/config";
import Modal from "react-modal";

const EventLists = () => {
  const [eventName, setEventName] = useState("");
  const [schedule, setSchedule] = useState("");
  const [description, setDescription] = useState("");
  const [bannerImage, setBannerImage] = useState(null);
  const [galleryList, setGalleryList] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [viewEvent, setViewEvent] = useState(null);

  useEffect(() => {
    const fetchEvents = async () => {
      const querySnapshot = await getDocs(collection(db, "events"));
      const events = [];
      querySnapshot.forEach((doc) => {
        events.push({ id: doc.id, ...doc.data() });
      });
      setGalleryList(events);
    };
    fetchEvents();
  }, []);

  const handleEventSubmit = async (e) => {
    e.preventDefault();

    let bannerImageUrl = "";
    if (bannerImage) {
      const storageRef = ref(storage, `images/${bannerImage.name}`);
      await uploadBytes(storageRef, bannerImage);
      bannerImageUrl = await getDownloadURL(storageRef);
    }

    const newEvent = {
      eventName,
      schedule,
      description,
      bannerImage: bannerImageUrl,
    };

    if (isEditing) {
      const eventDoc = doc(db, "events", currentIndex);
      await updateDoc(eventDoc, newEvent);
      setGalleryList(
        galleryList.map((event) =>
          event.id === currentIndex ? { id: currentIndex, ...newEvent } : event
        )
      );
      setIsEditing(false);
      setCurrentIndex(null);
    } else {
      const docRef = await addDoc(collection(db, "events"), newEvent);
      setGalleryList([...galleryList, { id: docRef.id, ...newEvent }]);
    }

    setEventName("");
    setSchedule("");
    setDescription("");
    setBannerImage(null);
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setBannerImage(file);
  };

  const handleDeleteEvent = async (id) => {
    await deleteDoc(doc(db, "events", id));
    setGalleryList(galleryList.filter((event) => event.id !== id));
  };

  const handleEditEvent = (event) => {
    setEventName(event.eventName);
    setSchedule(event.schedule);
    setDescription(event.description);
    setBannerImage(event.bannerImage);
    setIsEditing(true);
    setCurrentIndex(event.id);
  };

  const handleViewEvent = (event) => {
    setViewEvent(event);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  return (
    <div className="flex flex-col justify-center items-center container mx-auto">
      <div className="p-4 w-full">
        <h2 className="text-2xl text-center font-semibold mb-4">
          {isEditing ? "Edit Event" : "Create New Event"}
        </h2>
        <form
          onSubmit={handleEventSubmit}
          className="space-y-4 border border-black p-4"
        >
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Event Name
              </label>
              <input
                type="text"
                value={eventName}
                onChange={(e) => setEventName(e.target.value)}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Schedule
              </label>
              <input
                type="text"
                value={schedule}
                onChange={(e) => setSchedule(e.target.value)}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Banner Image
              </label>
              <input
                type="file"
                onChange={handleFileChange}
                className="mt-1 p-2 border rounded w-full"
                required={!isEditing}
              />
            </div>
          </div>
          <div className="grid">
            <button
              type="submit"
              className="bg-blue-500 text-white px-4 py-2 rounded place-self-end"
            >
              {isEditing ? "Update" : "Upload"}
            </button>
          </div>
        </form>
      </div>

      <div className="p-4 w-full">
        <h2 className="text-2xl text-center font-semibold mb-4">
          Event Gallery
        </h2>
        <table className="min-w-full bg-white border p-4">
          <thead>
            <tr>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                No
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                Schedule
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                Title
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                Description
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                Banner
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                Actions
              </th>
            </tr>
          </thead>
          <tbody>
            {galleryList.map((event, index) => (
              <tr key={index}>
                <td className="px-6 py-4 border-b border-gray-300">
                  {index + 1}
                </td>
                <td className="px-6 py-4 border-b border-gray-300">
                  {event.schedule}
                </td>
                <td className="px-6 py-4 border-b border-gray-300">
                  {event.eventName}
                </td>
                <td className="px-6 py-4 border-b border-gray-300">
                  {event.description}
                </td>
                <td className="px-6 py-4 border-b border-gray-300">
                  <img
                    src={event.bannerImage}
                    alt={event.eventName}
                    className="w-16 h-16 object-cover"
                  />
                </td>
                <td className="px-6 py-4 border-b border-gray-300 space-x-2">
                  <button
                    className="bg-blue-500 text-white px-2 py-1 rounded"
                    onClick={() => handleViewEvent(event)}
                  >
                    View
                  </button>
                  <button
                    className="bg-green-500 text-white px-2 py-1 rounded"
                    onClick={() => handleEditEvent(event)}
                  >
                    Edit
                  </button>
                  <button
                    className="bg-red-500 text-white px-2 py-1 rounded"
                    onClick={() => handleDeleteEvent(event.id)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Modal for viewing event */}
      <Modal
        isOpen={isModalOpen}
        onRequestClose={closeModal}
        contentLabel="View Event"
      >
        {viewEvent && (
          <div>
            <h2 className="text-2xl mb-4">{viewEvent.eventName}</h2>
            <p>
              <strong>Schedule:</strong> {viewEvent.schedule}
            </p>
            <p>
              <strong>Description:</strong> {viewEvent.description}
            </p>
            {viewEvent.bannerImage && (
              <img
                src={viewEvent.bannerImage}
                alt={viewEvent.eventName}
                className="w-1/4 h-1/4 mt-4"
              />
            )}
            <button
              onClick={closeModal}
              className="bg-red-500 text-white px-4 py-2 rounded mt-4"
            >
              Close
            </button>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default EventLists;

// File: app/components/adminFeedback/page.jsx
import React from "react";

const page = () => {
  return <div>Feed back</div>;
};

export default page;

// File: app/components/adminGallary/page.tsx
"use client";
import { useState, useEffect } from "react";
import {
  ref,
  uploadBytes,
  getDownloadURL,
  deleteObject,
} from "firebase/storage";
import { db, storage } from "../../backend/firebase/config";
import {
  collection,
  addDoc,
  getDocs,
  updateDoc,
  doc,
  deleteDoc,
} from "firebase/firestore";

export default function GalleryEdit() {
  const [gallery, setGallery] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [currentItem, setCurrentItem] = useState({
    id: null,
    img: "",
    galleryName: "",
  });

  useEffect(() => {
    const fetchGallery = async () => {
      const querySnapshot = await getDocs(collection(db, "gallery"));
      const fetchedGallery = [];
      querySnapshot.forEach((doc) => {
        fetchedGallery.push({ id: doc.id, ...doc.data() });
      });
      setGallery(fetchedGallery);
    };

    fetchGallery();
  }, []);

  const handleUpload = async (event) => {
    event.preventDefault();
    const file = event.target.image.files[0];
    const galleryName = event.target.galleryName.value;

    if (file && galleryName) {
      const storageRef = ref(storage, `images/${file.name}`);
      await uploadBytes(storageRef, file);
      const imgUrl = await getDownloadURL(storageRef);

      const newImage = {
        img: imgUrl,
        galleryName,
      };

      if (isEditing) {
        const docRef = doc(db, "gallery", currentItem.id);
        await updateDoc(docRef, newImage);
        setGallery(
          gallery.map((item) =>
            item.id === currentItem.id
              ? { id: currentItem.id, ...newImage }
              : item
          )
        );
        setIsEditing(false);
        setCurrentItem({ id: null, img: "", galleryName: "" });
      } else {
        const docRef = await addDoc(collection(db, "gallery"), newImage);
        setGallery([...gallery, { id: docRef.id, ...newImage }]);
      }

      event.target.reset();
    }
  };

  const handleDelete = async (id, imgPath) => {
    const docRef = doc(db, "gallery", id);
    await deleteDoc(docRef);

    const imageRef = ref(storage, imgPath);
    await deleteObject(imageRef);

    setGallery(gallery.filter((item) => item.id !== id));
  };

  const handleEdit = (item) => {
    setIsEditing(true);
    setCurrentItem(item);
  };

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8 p-4 border rounded shadow-lg">
        <h2 className="text-xl font-semibold mb-4">
          {isEditing ? "Edit Image" : "Upload Image"}
        </h2>
        <form onSubmit={handleUpload} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Image
            </label>
            <input
              type="file"
              name="image"
              className="mt-1 p-2 border rounded w-full"
              required={!isEditing}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Gallery Name
            </label>
            <input
              type="text"
              name="galleryName"
              defaultValue={currentItem.galleryName}
              className="mt-1 p-2 border rounded w-full"
              required
            />
          </div>
          <button
            type="submit"
            className="bg-blue-500 text-white px-4 py-2 rounded"
          >
            {isEditing ? "Update" : "Upload"}
          </button>
        </form>
      </div>

      <div className="p-4 border rounded shadow-lg">
        <h2 className="text-xl font-semibold mb-4">Gallery List</h2>
        <table className="min-w-full bg-white border">
          <thead>
            <tr>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                No:
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                IMG
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                Gallery Name
              </th>
              <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm leading-4 text-gray-600">
                Actions
              </th>
            </tr>
          </thead>
          <tbody>
            {gallery.map((item, index) => (
              <tr key={item.id}>
                <td className="px-6 py-4 border-b border-gray-300">
                  {index + 1}
                </td>
                <td className="px-6 py-4 border-b border-gray-300">
                  <img
                    src={item.img}
                    alt={item.galleryName}
                    className="w-16 h-16 object-cover"
                  />
                </td>
                <td className="px-6 py-4 border-b border-gray-300">
                  {item.galleryName}
                </td>
                <td className="px-6 py-4 border-b border-gray-300">
                  <button
                    onClick={() => handleEdit(item)}
                    className="bg-yellow-500 text-white px-2 py-1 rounded mr-2"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => handleDelete(item.id, item.img)}
                    className="bg-red-500 text-white px-2 py-1 rounded"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// File: app/components/adminJobs/EditJobPopup.jsx
import { IoMdCloseCircleOutline } from "react-icons/io";
import { TiTickOutline } from "react-icons/ti";
import { useState, useEffect } from "react";

const EditJobPopup = ({ job, onClose, onSave }) => {
  const [jobDetails, setJobDetails] = useState(job);

  useEffect(() => {
    setJobDetails(job);
  }, [job]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setJobDetails({ ...jobDetails, [name]: value });
  };

  const handleSave = () => {
    onSave(jobDetails);
    onClose();
  };

  if (!job) return null;

  return (
    <div className="popup">
      <div className="popup-content">
        <div className="flex justify-between">
          <h2 className="font-bold text-3xl text-blue-600 mt-2">Edit Job</h2>
          <div className="flex">
            <div className="flex justify-center items-center border-4 border-green-400 rounded-full mr-2 p-1">
              <TiTickOutline
                onClick={handleSave}
                className="w-8 h-8 font-bold text-green-600"
              />
            </div>
            <IoMdCloseCircleOutline
              onClick={onClose}
              className="w-12 h-12 font-bold text-red-600"
            />
          </div>
        </div>
        <form className="mt-8 p-4 border rounded-lg bg-white shadow-md space-y-4">
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Company Name:</label>
            <input
              type="text"
              name="companyName"
              placeholder="Company Name"
              value={jobDetails.companyName}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">About Job:</label>
            <textarea
              name="aboutJob"
              placeholder="About Job"
              value={jobDetails.aboutJob}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
              rows={4}
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Job Role:</label>
            <input
              type="text"
              name="jobRole"
              placeholder="Job Role"
              value={jobDetails.jobRole}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Location:</label>
            <input
              type="text"
              name="location"
              placeholder="Location"
              value={jobDetails.location}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Required Skill:</label>
            <input
              type="text"
              name="requiredSkill"
              placeholder="Required Skill"
              value={jobDetails.requiredSkill}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              Course Specialization:
            </label>
            <input
              type="text"
              name="courseSpecialization"
              placeholder="Course Specialization"
              value={jobDetails.courseSpecialization}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Salary:</label>
            <input
              type="text"
              name="salary"
              placeholder="Salary"
              value={jobDetails.salary}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Experience:</label>
            <input
              type="text"
              name="experience"
              placeholder="Experience"
              value={jobDetails.experience}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Contact Info:</label>
            <input
              type="text"
              name="contactInfo"
              placeholder="Contact Info"
              value={jobDetails.contactInfo}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">Company Website:</label>
            <input
              type="url"
              name="companyWebsite"
              placeholder="Company Website"
              value={jobDetails.companyWebsite}
              onChange={handleChange}
              required
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center justify-end space-x-2"></div>
        </form>
      </div>
      <style jsx>{`
        .popup {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          justify-content: center;
          align-items: center;
        }
        .popup-content {
          background: #fff;
          padding: 20px;
          border-radius: 8px;
          width: 80%;
          max-width: 500px;
        }
        form input,
        form textarea {
          display: block;
          width: 100%;
          margin-bottom: 10px;
        }
        form button {
          margin-right: 10px;
        }
      `}</style>
    </div>
  );
};

export default EditJobPopup;

// File: app/components/adminJobs/page.jsx
"use client";
import { IoMdAdd } from "react-icons/io";
import { useState, useEffect } from "react";
import { ref, onValue, remove, update } from "firebase/database";
import { doc, getDoc } from "firebase/firestore";
import EditJobPopup from "./EditJobPopup.jsx";
import { db, database } from "../../backend/firebase/config";
import ViewJobPopup from "./ViewJobPopup.jsx";

const JobList = () => {
  const [jobs, setJobs] = useState([]);
  const [userDetails, setUserDetails] = useState({});
  const [viewingJob, setViewingJob] = useState(null);
  const [editingJob, setEditingJob] = useState(null);

  useEffect(() => {
    const fetchJobs = async () => {
      const jobsRef = ref(database, "jobs");
      onValue(jobsRef, async (snapshot) => {
        const data = snapshot.val();
        const allJobs = [];
        const userDetails = {};

        for (const userId in data) {
          for (const jobId in data[userId]) {
            allJobs.push({
              id: jobId,
              userId: userId,
              ...data[userId][jobId],
            });
          }

          // Fetch user details for each userId
          const docRef = doc(db, "users", userId);
          const docSnap = await getDoc(docRef);
          if (docSnap.exists()) {
            userDetails[userId] = docSnap.data();
          }
        }

        setJobs(allJobs);
        setUserDetails(userDetails);
      });
    };

    fetchJobs();
  }, []);

  const handleDelete = (userId, jobId) => {
    const jobRef = ref(database, `jobs/${userId}/${jobId}`);

    if (window.confirm("Are you sure you want to delete this job?")) {
      remove(jobRef)
        .then(() => {
          console.log("Job deleted successfully");
        })
        .catch((error) => {
          console.error("Error deleting job: ", error);
        });
    }
  };

  const handleEdit = (job) => {
    setEditingJob(job);
  };

  const handleSave = (updatedJob) => {
    const jobRef = ref(database, `jobs/${updatedJob.userId}/${updatedJob.id}`);
    update(jobRef, updatedJob)
      .then(() => {
        console.log("Job updated successfully");
        setEditingJob(null);
      })
      .catch((error) => {
        console.error("Error updating job: ", error);
      });
  };

  const handleView = (job) => {
    setViewingJob(job);
  };

  const handleClose = () => {
    setViewingJob(null);
    setEditingJob(null);
  };

  return (
    <div>
      <div className="container mx-auto mt-8">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-4xl font-bold">Jobs List</h1>
          <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 flex">
            <IoMdAdd className="w-8 h-8" />
            <h1 className="font-bold text-2xl">New</h1>
          </button>
        </div>
        <table className="w-full border-collapse border border-gray-300">
          <thead>
            <tr>
              <th className="border border-gray-300 px-4 py-2">#</th>
              <th className="border border-gray-300 px-4 py-2">Company</th>
              <th className="border border-gray-300 px-4 py-2">Job Title</th>
              <th className="border border-gray-300 px-4 py-2">Posted By</th>
              <th className="border border-gray-300 px-4 py-2">Action</th>
            </tr>
          </thead>
          <tbody>
            {jobs.map((job, index) => (
              <tr key={job.id} className="text-center">
                <td className="border border-gray-300 px-4 py-2">
                  {index + 1}
                </td>
                <td className="border border-gray-300 px-4 py-2">
                  {job.companyName}
                </td>
                <td className="border border-gray-300 px-4 py-2">
                  {job.jobRole}
                </td>
                <td className="border border-gray-300 px-4 py-2">
                  {userDetails[job.userId]?.firstname}{" "}
                  {userDetails[job.userId]?.lastname}
                  {/* {job.userId} */}
                </td>
                <td className="border border-gray-300 px-4 py-2 space-x-4">
                  <button
                    className="px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                    onClick={() => handleView(job)}
                  >
                    View
                  </button>
                  <button
                    className="px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600"
                    onClick={() => handleEdit(job)}
                  >
                    Edit
                  </button>
                  <button
                    className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                    onClick={() => handleDelete(job.userId, job.id)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {viewingJob && <ViewJobPopup job={viewingJob} onClose={handleClose} />}
        {editingJob && (
          <EditJobPopup
            job={editingJob}
            onClose={handleClose}
            onSave={handleSave}
          />
        )}
      </div>
    </div>
  );
};

export default JobList;

// File: app/components/adminJobs/ViewJobPopup.jsx
import { IoMdCloseCircleOutline } from "react-icons/io";
const ViewJobPopup = ({ job, onClose }) => {
  if (!job) return null;

  return (
    <div className="popup">
      <div className="popup-content">
        <div className="flex justify-between">
          <h2 className="font-bold text-3xl text-blue-600 mt-2">View Job</h2>
          <IoMdCloseCircleOutline
            onClick={onClose}
            className="w-12 h-12 font-bold text-red-600"
          />
        </div>
        <div className="mt-8 p-4 border rounded-lg bg-white shadow-md space-y-4">
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Company Name:</strong>
            </label>
            <input
              type="text"
              value={job.companyName}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>About Job:</strong>
            </label>
            <textarea
              readOnly
              value={job.aboutJob}
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
              rows={4} // Adjust the number of rows as needed
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Job Role:</strong>
            </label>
            <input
              type="text"
              value={job.jobRole}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Location:</strong>
            </label>
            <input
              type="text"
              value={job.location}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Required Skill:</strong>
            </label>
            <input
              type="text"
              value={job.requiredSkill}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Course Specialization:</strong>
            </label>
            <input
              type="text"
              value={job.courseSpecialization}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Salary:</strong>
            </label>
            <input
              type="text"
              value={job.salary}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Experience:</strong>
            </label>
            <input
              type="text"
              value={job.experience}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Contact Info:</strong>
            </label>
            <input
              type="text"
              value={job.contactInfo}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100"
            />
          </div>
          <div className="flex items-center mb-2">
            <label className="block font-medium w-1/3">
              <strong>Company Website:</strong>
            </label>
            <input
              type="text"
              value={job.companyWebsite}
              readOnly
              className="w-2/3 p-2 border rounded-lg bg-gray-100 text-blue-500"
            />
          </div>
        </div>
      </div>
      <style jsx>{`
        .popup {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          justify-content: center;
          align-items: center;
        }
        .popup-content {
          background: #fff;
          padding: 20px;
          border-radius: 8px;
          width: 80%;
          max-width: 500px;
        }
      `}</style>
    </div>
  );
};

export default ViewJobPopup;

// File: app/components/adminSendMail/page.jsx
import React from "react";

const page = () => {
  return <div>Sent mail</div>;
};

export default page;

// File: app/components/adminShareIdea/page.jsx
import React from "react";

const page = () => {
  return <div>share idea</div>;
};

export default page;

// File: app/components/footer/page.tsx
import React from "react";

export default function Footer() {
  return (
    <div className="border-t-2 border-black mt-8">
      <footer className="container mx-auto text-center text-surface/75 bg-[#ffffff] text-black lg:text-left">
        <div className="mx-6 py-10 text-center md:text-left">
          <div className="grid-1 grid gap-8 md:grid-cols-2 lg:grid-cols-4">
            <div className="">
              <h6 className="mb-4 flex items-center justify-center font-semibold text-gray-500 md:justify-start">
                privacy policy
              </h6>
            </div>

            <div>
              <h6 className="mb-4 flex justify-center font-semibold text-gray-500 md:justify-start">
                Terms of Use
              </h6>
            </div>

            <div>
              <div className="flex justify-center">
                <a href="#!" className="me-6 [&>svg]:h-4 [&>svg]:w-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 320 512"
                  >
                    {/* <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc. --> */}
                    <path d="M80 299.3V512H196V299.3h86.5l18-97.8H196V166.9c0-51.7 20.3-71.5 72.7-71.5c16.3 0 29.4 .4 37 1.2V7.9C291.4 4 256.4 0 236.2 0C129.3 0 80 50.5 80 159.4v42.1H14v97.8H80z" />
                  </svg>
                </a>
                <a href="#!" className="me-6 [&>svg]:h-4 [&>svg]:w-4 ">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 512 512"
                  >
                    {/* <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc. --> */}
                    <path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z" />
                  </svg>
                </a>
                <a href="#!" className="me-6 [&>svg]:h-4 [&>svg]:w-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 488 512"
                  >
                    {/* <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc. --> */}
                    <path d="M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z" />
                  </svg>
                </a>
                <a href="#!" className="me-6 [&>svg]:h-4 [&>svg]:w-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 448 512"
                  >
                    {/* <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc. --> */}
                    <path d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z" />
                  </svg>
                </a>
                <a href="#!" className="me-6 [&>svg]:h-4 [&>svg]:w-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 448 512"
                  >
                    {/* <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc. --> */}
                    <path d="M100.3 448H7.4V148.9h92.9zM53.8 108.1C24.1 108.1 0 83.5 0 53.8a53.8 53.8 0 0 1 107.6 0c0 29.7-24.1 54.3-53.8 54.3zM447.9 448h-92.7V302.4c0-34.7-.7-79.2-48.3-79.2-48.3 0-55.7 37.7-55.7 76.7V448h-92.8V148.9h89.1v40.8h1.3c12.4-23.5 42.7-48.3 87.9-48.3 94 0 111.3 61.9 111.3 142.3V448z" />
                  </svg>
                </a>
                <a href="#!" className="[&>svg]:h-4 [&>svg]:w-4">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    viewBox="0 0 496 512"
                  >
                    {/* <!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc. --> */}
                    <path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z" />
                  </svg>
                </a>
              </div>
            </div>

            <div>
              <h6 className="mb-4 flex justify-center font-semibold text-gray-500 md:justify-start">
                @2024 All Rights Reserved
              </h6>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

{
  /* <div class="flex items-center justify-center border-b-2 border-neutral-200 p-6 dark:border-white/10 lg:justify-between">
          <div class="me-12 hidden lg:block">
            <span>Get connected with us on social networks:</span>
          </div>
          {/* <!-- Social network icons container --> */
}

// </div> */}

// File: app/components/homeNav/page.tsx
"use client";
import { RiArrowDropDownLine } from "react-icons/ri";
import { FaSearch } from "react-icons/fa";
import React, { useState, useContext } from "react";
import { AuthContext } from "../../backend/AuthContext";
import Link from "next/link";
import { AiOutlineMenu } from "react-icons/ai";

import { signOut } from "firebase/auth";
import { auth } from "../../backend/firebase/config";

export default function HomeNav() {
  const [menu, setMenu] = useState(false);
  const [jobsMenu, setJobsMenu] = useState(false); // To handle dropdown visibility

  const handleChange = () => {
    setMenu(!menu);
  };

  const toggleJobsMenu = () => {
    setJobsMenu(!jobsMenu);
  };
  // const { dispatch } = useContext(AuthContext);

  const handleLogout = () => {
    signOut(auth);
    localStorage.removeItem("user");
    localStorage.clear();
    sessionStorage.clear();
    // dispatch({ type: "LOGOUT" });
  };

  return (
    <div className="fixed w-full z-40 ">
      <div className="flex flex-row justify-between p-6 md:px-32 px-5 bg-darkBackground text-white bg-[#080e20]">
        <div className=" flex items-center" data-aos="fade-right">
          <Link href="/hero">
            <h1 className="text-white font-bold text-3xl cursor-pointer">
              Alumni Tracking
            </h1>
          </Link>
        </div>
        <nav className="hidden lg:flex flex-row items-center gap-6 font-bold text-xl ">
          <Link
            href="/"
            className="text-blue-600 hover:scale-95"
            data-aos="zoom-out-down"
            data-aos-duration="3000"
          >
            Home
          </Link>
          <Link
            href="/ui/alumniList"
            className=" hover:text-blue-600 hover:scale-95"
            data-aos="zoom-out-down"
          >
            Alumni
          </Link>
          <Link
            href="/ui/eventList"
            className=" hover:text-blue-600 hover:scale-95"
            data-aos="zoom-out-down"
          >
            Events
          </Link>
          <div className="relative flex items-center">
            {/* Jobs button with dropdown */}
            <button
              onClick={toggleJobsMenu}
              className="flex hover:text-blue-600"
              data-aos="zoom-out-down"
            >
              Jobs
              <RiArrowDropDownLine className="mt-1 w-6 h-6 hover:scale-95" />
            </button>
            {jobsMenu && ( // Display the dropdown menu if jobsMenu is true
              <div className="absolute top-full left-8 bg-gray-100 shadow-lg p-2 rounded w-40">
                <Link
                  href="/ui/viewJob"
                  className="block px-4 py-2 text-black hover:text-blue-600 hover:scale-95"
                >
                  View-Jobs
                </Link>
                <Link
                  href="/ui/postJob"
                  className="block px-4 py-2 text-black hover:text-blue-600 hover:scale-95"
                >
                  Post-Jobs
                </Link>
              </div>
            )}
          </div>
          <Link
            href="/ui/gallery"
            className=" hover:text-blue-600 hover:scale-95"
            data-aos="zoom-out-down"
          >
            Gallery
          </Link>
          <Link
            href="/ui/profile"
            className=" hover:text-blue-600 hover:scale-95"
            data-aos="zoom-out-down"
          >
            Profile
          </Link>
        </nav>

        <div
          className="hidden lg:flex flex-row items-center gap-4"
          data-aos="zoom-in"
        >
          <Link href="/">
            <div className="relative md:w-65 border-2 h-11 border-blue-600 rounded-lg">
              <span className="relative md:absolute inset-y-0 left-0 fkex items-center pl-2">
                <button className="p-1 focus:outline-none text-black md:text-black mt-1">
                  <FaSearch className="text-white w-5 h-6" />
                </button>
              </span>
              <input
                type="text"
                className="w-full px-4 py-1 pl-12 rounded shadow outline-none hidden md:block bg-[#080e20]"
              />
            </div>
          </Link>

          <Link href="/">
            <button
              className="border-2 border-white p-1 h-10 w-20 rounded-lg bg-blue-600 hover:text-white hover:text-[15px] hover:scale-95"
              onClick={handleLogout}
            >
              <h1 className="font-bold hover:scale-95">Logout</h1>
            </button>
          </Link>
        </div>

        <div
          className=" lg:hidden flex items-center p-2"
          onClick={handleChange}
        >
          <AiOutlineMenu size={25} />
        </div>
      </div>
      <div
        className={` ${
          menu ? "translate-x-0" : "-translate-x-full"
        } lg:hidden flex flex-col absolute bg-darkBackground text-white bg-white left-0 top-20 font-semibold text-2xl text-center pt-8 pb-4 gap-8 w-full h-fit transition-transform duration-300`}
      >
        <Link href="/hero" className="text-blue-600 hover:scale-95">
          Home
        </Link>
        <Link
          href="/about"
          className="text-black hover:text-blue-600 hover:scale-95"
        >
          Events
        </Link>

        <div className="flex justify-center">
          <button
            onClick={toggleJobsMenu}
            className="flex text-black hover:text-blue-600 hover:scale-95"
          >
            Jobs
            <RiArrowDropDownLine className="mt-1 w-6 h-6 hover:scale-95" />
          </button>
          {jobsMenu && (
            <div className="absolute bg-white text-black shadow-lg w-40">
              <Link
                href="/ui/viewJob"
                className="block px-4 py-2 hover:bg-gray-100 hover:scale-95"
              >
                View-Jobs
              </Link>
              <Link
                href="/ui/postJob"
                className="block px-4 py-2 hover:bg-gray-100 hover:scale-95"
              >
                Post-Jobs
              </Link>
            </div>
          )}
        </div>

        <Link
          href="/gallery"
          className="text-black hover:text-blue-600 hover:scale-95"
        >
          Gallery
        </Link>
        <Link
          href="/contacts"
          className="text-black hover:text-blue-600 hover:scale-95"
        >
          Profile
        </Link>
      </div>
    </div>
  );
}

// File: app/components/navbar/page.tsx
"use client";
import React, { useState } from "react";
import Link from "next/link";
import { AiOutlineMenu } from "react-icons/ai";

export default function navbar() {
  const [menu, setMenu] = useState(false);

  const handleChange = () => {
    setMenu(!menu);
  };

  return (
    <div className="fixed w-full z-40 ">
      <div className="flex flex-row justify-between p-6 md:px-32 px-5 bg-darkBackground text-black bg-[#ffffff]">
        <div className=" flex items-center" data-aos="fade-right">
          <Link href="/hero">
            <h1 className="text-blue-800 font-bold text-3xl cursor-pointer">
              Alumni Tracking
            </h1>
          </Link>
        </div>
        <nav className="hidden lg:flex flex-row items-center gap-6 font-bold text-xl ">
          <Link
            href="/"
            className="text-blue-800"
            data-aos="zoom-out-down"
            data-aos-duration="3000"
          >
            Home
          </Link>
          <Link
            href="/ui/about"
            className=" hover:text-blue-800"
            data-aos="zoom-out-down"
          >
            About Us
          </Link>
          <Link
            href="/ui/servicess"
            className=" hover:text-blue-800"
            data-aos="zoom-out-down"
          >
            Services
          </Link>
          <Link
            href="/ui/gallery"
            className=" hover:text-blue-800"
            data-aos="zoom-out-down"
          >
            Gallery
          </Link>
          <Link
            href="/ui/contacts"
            className=" hover:text-blue-800"
            data-aos="zoom-out-down"
          >
            Contacts
          </Link>
        </nav>

        <div
          className="hidden lg:flex flex-row items-center gap-4"
          data-aos="zoom-in"
        >
          <Link href="/authentication/login">
            <button className="border-2 border-blue-800 p-1 h-10 w-20 rounded-lg hover:bg-blue-800 hover:text-white hover:text-[15px] hover:scale-95">
              <h1 className="font-bold ">Login</h1>
            </button>
          </Link>

          <Link href="/authentication/admin_login">
            <button className="bg-blue-700 p-1 h-10 w-20 rounded-lg hover:text-[15px] hover:scale-95">
              <h1 className="text-white font-bold">Admin</h1>
            </button>
          </Link>
        </div>

        <div
          className=" lg:hidden flex items-center p-2"
          onClick={handleChange}
        >
          <AiOutlineMenu size={25} />
        </div>
      </div>
      <div
        className={` ${
          menu ? "translate-x-0" : "-translate-x-full"
        } lg:hidden flex flex-col absolute bg-darkBackground text-white bg-white left-0 top-20 font-semibold text-2xl text-center pt-8 pb-4 gap-8 w-full h-fit transition-transform duration-300`}
      >
        <Link href="/" className="text-blue-800">
          Home
        </Link>
        <Link href="/ui/about" className="text-black hover:text-blue-800">
          About Us
        </Link>
        <Link href="/ui/servicess" className="text-black hover:text-blue-800">
          Service
        </Link>

        <Link href="/ui/gallery" className="text-black hover:text-blue-800">
          Gallery
        </Link>
        <Link href="/ui/contacts" className="text-black hover:text-blue-800">
          Contacts
        </Link>
      </div>
    </div>
  );
}

// File: app/constants/formSource.js
export const userInputs = [
  {
    id: "firstname",
    label: "Firstname",
    type: "text",
    placeholder: "First Name",
  },
  {
    id: "lastname",
    label: "Lastname",
    type: "text",
    placeholder: "Last Name",
  },
  {
    id: "email",
    label: "Email",
    type: "email",
    placeholder: "Email",
  },
  {
    id: "phone",
    label: "Phone",
    type: "tel",
    placeholder: "Phone",
  },
  {
    id: "password",
    label: "Password",
    type: "password",
    placeholder: "Password",
  },
  {
    id: "repeatPassword",
    label: "Repeat Password",
    type: "password",
    placeholder: "Repeat Password",
  },
  {
    id: "dateOfBirth",
    label: "Date of Birth",
    type: "date",
    placeholder: "Date of Birth",
  },
  {
    id: "gender",
    label: "Gender",
    type: "select",
    options: [
      { value: "", label: "Select Gender" },
      { value: "male", label: "Male" },
      { value: "female", label: "Female" },
      { value: "other", label: "Other" },
    ],
  },
  {
    id: "course",
    label: "Course Graduated",
    type: "select",
    options: [
      { value: "", label: "Select Course" },
      { value: "cse", label: "Computer Science Engineering" },
      { value: "me", label: "Mechanical Engineering" },
      { value: "ce", label: "Civil Engineering" },
      { value: "eee", label: "Electrical Electronics Engineering" },
      { value: "ece", label: "Electronics Communication Engineering" },
      { value: "it", label: "Information Technology" },
    ],
  },
  {
    id: "batch",
    label: "Batch",
    type: "number",
    placeholder: "Batch",
  },
  {
    id: "connectedTo",
    label: "Connected To",
    type: "textarea",
    placeholder: "Connected To",
  },
  {
    id: "address",
    label: "Address",
    type: "textarea",
    placeholder: "Address",
  },
];

// File: app/constants/jobData.js
const data = [
  {
    company: "srgc",
    aboutJob:
      "A teacher is responsible for preparing lesson plans and educating students at all levels. Their duties include assigning homework, grading tests, and documenting progress. Teachers must be able to instruct in a variety of subjects and reach students with",
    jobRole: "teacher",
    location: "palakkad",
    skillsRequired: "good communication and teaching skill",
    specialization: "btech(cse), mtech",
    salary: "3.5 ctc",
    experience: "4 years",
    contact: "+91 89877 46893",
    companyWebsite: "https://www.instagram.com/",
  },
  {
    company: "srgc",
    aboutJob:
      "A teacher is responsible for preparing lesson plans and educating students at all levels. Their duties include assigning homework, grading tests, and documenting progress. Teachers must be able to instruct in a variety of subjects and reach students with",
    jobRole: "teacher",
    location: "palakkad",
    skillsRequired: "good communication and teaching skill",
    specialization: "btech(cse), mtech",
    salary: "3.5 ctc",
    experience: "4 years",
    contact: "+91 89877 46893",
    companyWebsite: "https://www.instagram.com/",
  },
  // Additional job objects...
];
export default data;

// File: app/constants/profileData.js

// File: app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* global.css */
/* .background-image {
    background-image: url('/public/images/home.png');
    background-size: cover;
    background-position: center;
    height: 100vh;
    width: 100vw;
} */


// File: app/layout.jsx
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Alumni Management System",
  description: "Created By Group 16",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

// File: app/page.jsx
"use client";
import { useEffect, useState, useContext } from "react";
import MainWelcomeScreen from "./screens/main_welcome_screen/page";
import MainHomeScreen from "./screens/main_home_screen/page";
import MainAdminScreen from "./screens/main_admin_screen/page";
// import { AuthContext } from "./backend/AuthContext";

export default function Home() {
  // const { currentUser } = useContext(AuthContext);
  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);
  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);

  useEffect(() => {
    const user = localStorage.getItem("user");
    const admin = localStorage.getItem("admin");
    if (user != null) {
      setIsUserLoggedIn(true);
    }
    if (admin != null) {
      setIsAdminLoggedIn(true);
    }
  }, []);

  return (
    <main>
      {isUserLoggedIn ? (
        <MainHomeScreen />
      ) : isAdminLoggedIn ? (
        <MainAdminScreen />
      ) : (
        <MainWelcomeScreen />
      )}
    </main>
  );
}

// File: app/screens/main_admin_screen/page.jsx
import React from "react";
import Admin from "../../ui/adminDash/page";

const MainAdminScreen = () => {
  return (
    <div>
      <Admin />
    </div>
  );
};

export default MainAdminScreen;

// File: app/screens/main_home_screen/page.jsx
"use client";
import React from "react";
import HomePage from "../../ui/homePage/page";
import About from "../../ui/about/page";
import Footer from "../../components/footer/page";
import Service from "../../ui/servicess/page";
import Gallery from "../../ui/gallery/page";
import Contact from "../../ui/contacts/page";

const MainHomeScreen = () => {
  return (
    <div>
      <HomePage />
      <About />
      <Service />
      <Gallery />
      <Contact />
      <Footer />
    </div>
  );
};

export default MainHomeScreen;

// File: app/screens/main_welcome_screen/page.jsx
"use client";
import React from "react";
import Welcome from "../../ui/welcome/page";
import About from "../../ui/about/page";
import Footer from "../../components/footer/page";
import Service from "../../ui/servicess/page";
import Gallery from "../../ui/gallery/page";
import Contact from "../../ui/contacts/page";

const MainWelcomeScreen = () => {
  return (
    <div>
      <Welcome />
      <About />
      <Service />
      <Gallery />
      <Contact />
      <Footer />
    </div>
  );
};

export default MainWelcomeScreen;

// File: app/ui/about/page.tsx
import React from "react";

export default function About() {
  return (
    <div className="container mx-auto pt-12">
      <h1 className="font-bold text-5xl mb-10 text-center">About Us</h1>
      <div className="grid grid-cols-1 p-2">
        <div className="flex flex-col md:flex-row items-center md:items-start md:space-x-3">
          <div className="p-3 w-3/4 hover:scale-95">
            <img src="/images/about.png" alt="About Us" className="w-96 h-96" />
          </div>

          <div className=" p-5 pt-20 col-span-2 text-center">
            <h2 className="text-3xl font-semibold mb-4">Our Mission</h2>
            <p className="text-gray-700 text-xl hover:text-blue-800">
              "Our mission is to create a robust Alumni Management System that
              fosters connections and engagement among alumni, students, and the
              institution. We aim to provide a platform for lifelong learning,
              networking, and professional development opportunities."
            </p>
          </div>
        </div>
        <div className="md:flex ">
          <div className="p-5 pt-16 h-80 text-center">
            <h2 className="text-3xl font-semibold mb-4">Our Vision</h2>
            <p className="text-gray-700 text-xl hover:text-blue-800">
              "Our vision is to build a vibrant and inclusive alumni community
              that contributes to the growth and success of both individual
              members and the alma mater. We envision a dynamic platform that
              facilitates meaningful interactions, knowledge sharing, and
              collaboration among alumni across generations and geographical
              locations."
            </p>
          </div>

          <div className="hover:scale-95  w-auto">
            <img
              src="/images/about2.png"
              alt="About Us"
              className="w-[930px] h-80"
            />
          </div>
        </div>
      </div>
    </div>
  );
}

// File: app/ui/adminDash/dashboard /page.tsx
import React, { useEffect, useState } from "react";
import { collection, getDocs } from "firebase/firestore";
import { ref, get, child } from "firebase/database";
import { db, database } from "../../../backend/firebase/config"; // Adjust the path as needed
import { HiUser } from "react-icons/hi";
import { FaUserGraduate } from "react-icons/fa";
import { PiNotepad } from "react-icons/pi";

export default function Dashboard() {
  const [data, setData] = useState([
    { icon: HiUser, num: 0, name: "Total Alumni", color: "bg-blue-500" },
    {
      icon: FaUserGraduate,
      num: 0,
      name: "Posted Jobs",
      color: "bg-green-500",
    },
    {
      icon: PiNotepad,
      num: 0,
      name: "Upcoming Events",
      color: "bg-yellow-500",
    },
  ]);

  useEffect(() => {
    async function fetchData() {
      try {
        // Fetch total alumni count from Firestore
        const alumniSnapshot = await getDocs(collection(db, "users"));
        const totalAlumni = alumniSnapshot.size;

        // Fetch posted jobs count from Realtime Database
        const jobsRef = ref(database, "jobs");
        const jobsSnapshot = await get(jobsRef);
        let totalJobs = 0;

        jobsSnapshot.forEach((userJobsSnapshot) => {
          totalJobs += userJobsSnapshot.size;
        });

        // Fetch upcoming events count from Firestore
        const eventsSnapshot = await getDocs(collection(db, "events"));
        const totalEvents = eventsSnapshot.size;

        // Update the state with the fetched data
        setData([
          {
            icon: HiUser,
            num: totalAlumni,
            name: "Total Alumni",
            color: "bg-blue-500",
          },
          {
            icon: FaUserGraduate,
            num: totalJobs,
            name: "Posted Jobs",
            color: "bg-green-500",
          },
          {
            icon: PiNotepad,
            num: totalEvents,
            name: "Upcoming Events",
            color: "bg-yellow-500",
          },
        ]);
      } catch (error) {
        console.error("Error fetching data from Firebase:", error);
      }
    }

    fetchData();
  }, []);

  return (
    <div className="bg-gray-200 h-full p-5 overflow">
      <div className="bg-gray-200 h-full p-5">
        <div className="flex p-8 gap-12">
          {data.map((item, index) => (
            <div key={index} className="flex space-x-5 bg-white p-4 rounded-lg">
              <div
                className={`model rounded-full w-20 h-20 mt-2 flex items-center justify-center ${item.color}`}
              >
                <item.icon className="text-white w-10 h-10" />
              </div>
              <div className="mt-4 space-y-1">
                <span className="font-bold text-2xl">{item.num}</span>
                <p className="text-gray-500">{item.name}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// File: app/ui/adminDash/navbar/page.tsx
import Link from "next/link";
import React from "react";
import { FaBars, FaBell, FaSearch, FaUserCircle } from "react-icons/fa";

export default function Navbar({ sidebarToggle, setSidebarToggle }) {
  return (
    <div className="bg-slate-400 px-4 py-3 flex min-h-20 justify-between items-center w-full ">
      <div className="flex items-center text-xl">
        <FaBars
          className="me-4 cursor-pointer"
          onClick={() => setSidebarToggle(!sidebarToggle)}
        />
      </div>
      <div className="flex items-center gap-x-5">
        <div className="relative md:w-65">
          <span className="relative md:absolute inset-y-0 left-0 flex items-center pl-2">
            <button className="p-1 focus:outline-none text-white md:text-black mt-1">
              <FaSearch />
            </button>
          </span>
          <input
            type="text"
            className="w-full px-4 py-1 pl-12 rounded shadow outline-none hidden md:block"
          />
        </div>
        <div>
          <FaBell className="w-6 h-6" />
        </div>
        <div className="relative">
          <button className="group">
            <FaUserCircle className="w-6 h-6 mt-1" />
            <div className="z-10 hidden absolute bg-white rounded-lg shadow w-32 group-focus:block top-full right-0">
              <ul className="py-4 text-md text-black grid grid-rows-3 gap-2">
                <li className="hover:bg-blue-500 hover:text-white w-24 mx-auto rounded-md">
                  <Link href="/profile">
                    <p>Profile</p>
                  </Link>
                </li>
                <li className="hover:bg-blue-500 hover:text-white w-24 mx-auto rounded-md">
                  <Link href="/settings">
                    <p>Setting</p>
                  </Link>
                </li>
                <li className="hover:bg-blue-500 hover:text-white w-24 mx-auto rounded-md">
                  <Link href="/ui/welcome">
                    <p onClick={() => localStorage.clear()}>Logout</p>
                  </Link>
                </li>
              </ul>
            </div>
          </button>
        </div>
      </div>
    </div>
  );
}

// File: app/ui/adminDash/page.tsx
"use client";
import React, { useState } from "react";
import Sidebar from "./sidebar/page";
import Navbar from "./navbar/page";
import DashAdmin from "./dashboard /page";
import AlumniList from "../../components/adminAlumniList/page";
import Gallery from "../../components/adminGallary/page";
import AddEvents from "../../components/adminEvents/page";
import Jobs from "../../components/adminJobs/page";
import Feedbacck from "../../components/adminFeedback/page";
import ShareIdea from "../../components/adminShareIdea/page";
import SendMail from "../../components/adminSendMail/page";

export default function AdminDash() {
  const [sidebarToggle, setSidebarToggle] = useState(false);
  const [activeScreen, setActiveScreen] = useState("dashboard");

  const renderActiveScreen = () => {
    switch (activeScreen) {
      case "dashboard":
        return <DashAdmin />;
      case "alumniList":
        return <AlumniList />;
      case "gallery":
        return <Gallery />;
      case "addEvents":
        return <AddEvents />;
      case "jobs":
        return <Jobs />;
      case "feedback":
        return <Feedbacck />;
      case "shareIdea":
        return <ShareIdea />;
      case "sendMail":
        return <SendMail />;
      default:
        return <DashAdmin />;
    }
  };

  return (
    <div className="flex h-screen">
      <Sidebar
        sidebarToggle={sidebarToggle}
        setActiveScreen={setActiveScreen}
        activeScreen={activeScreen}
      />
      <div className={`flex flex-col w-full ${sidebarToggle ? "" : "ml-72"}`}>
        <Navbar
          sidebarToggle={sidebarToggle}
          setSidebarToggle={setSidebarToggle}
        />
        <main className="flex-grow p-3 pr-4 overflow-hidden scroll-smooth overflow-y-auto">
          {renderActiveScreen()}
        </main>
      </div>
    </div>
  );
}

// File: app/ui/adminDash/sidebar/data.js
import { AiOutlineDashboard } from "react-icons/ai";
import { HiUser } from "react-icons/hi";
import { PiNotepad } from "react-icons/pi";
import { FaRegMessage } from "react-icons/fa6";
import { FaUserGraduate } from "react-icons/fa";
import { IoShareSocialOutline } from "react-icons/io5";
import { GrGallery } from "react-icons/gr";
import { MdOutgoingMail } from "react-icons/md";

const data = [
  {
    name: "Dashboard",
    icon: AiOutlineDashboard,
    screen: "dashboard",
  },
  {
    name: "Alumni List",
    icon: HiUser,
    screen: "alumniList",
  },
  {
    name: "Gallery",
    icon: GrGallery,
    screen: "gallery",
  },
  {
    name: "Add Event",
    icon: PiNotepad,
    screen: "addEvents",
  },
  {
    name: "Jobs",
    icon: FaUserGraduate,
    screen: "jobs",
  },
  {
    name: "Feedback",
    icon: FaRegMessage,
    screen: "feedback",
  },
  {
    name: "Share Idea",
    icon: IoShareSocialOutline,
    screen: "shareIdea",
  },
  {
    name: "Send Mail",
    icon: MdOutgoingMail,
    screen: "sendMail",
  },
];

export default data;

// File: app/ui/adminDash/sidebar/page.tsx
import React from "react";
import Link from "next/link";
import Data from "./data";
import { IoLogOutOutline } from "react-icons/io5";

export default function Sidebar({
  sidebarToggle,
  setActiveScreen,
  activeScreen,
}) {
  return (
    <div
      className={`${
        sidebarToggle ? "hidden" : "block"
      } w-72 bg-gray-800 fixed h-full px-4 py-2`}
    >
      <div className="mb-6 flex items-center justify-center">
        <h1 className="text-2xl text-white font-bold mt-5">ADMIN PANEL</h1>
      </div>
      <div className="flex items-center justify-center bg-black border-2 border-white p-2">
        <h1 className="text-[16px] text-gray-500 font-bold">
          Alumni Tracking System
        </h1>
      </div>
      <ul className="mt-3 text-white font-bold">
        {Data.map((item, index) => (
          <li
            key={index}
            className={`mb-2 rounded hover:shadow hover:bg-blue-500 py-2 ${
              activeScreen === item.screen ? "bg-blue-500" : ""
            }`}
          >
            <button
              onClick={() => setActiveScreen(item.screen)}
              className="px-3 flex items-center gap-2 w-full text-left"
            >
              <item.icon className="w-6 h-6" />
              <h2 className="text-xl font-semibold">{item.name}</h2>
            </button>
          </li>
        ))}
        <li className="mb-2 rounded hover:shadow hover:bg-blue-500 py-2">
          <Link href="/ui/welcome" className="px-3 flex items-center gap-2">
            <IoLogOutOutline className="w-6 h-6" />
            <h2
              onClick={() => localStorage.clear()}
              className="text-xl font-semibold"
            >
              LogOut
            </h2>
          </Link>
        </li>
      </ul>
    </div>
  );
}

// File: app/ui/alumniList/data.js
const alumniData = [
  {
    id: 1,
    avatar: "https://via.placeholder.com/50",
    name: "Viswajith",
    passoutYear: 2025,
    verified: true,
  },
  {
    id: 1,
    avatar: "https://via.placeholder.com/50",
    name: "Jerald",
    passoutYear: 2025,
    verified: true,
  },
  {
    id: 1,
    avatar: "https://via.placeholder.com/50",
    name: "Aswin",
    passoutYear: 2025,
    verified: false,
  },
  {
    id: 1,
    avatar: "https://via.placeholder.com/50",
    name: "pinggy",
    passoutYear: 2025,
    verified: false,
  },
  {
    id: 1,
    avatar: "https://via.placeholder.com/50",
    name: "Nair",
    passoutYear: 2025,
    verified: true,
  },
];
export default alumniData;
// File: app/ui/alumniList/page.tsx
"use client";

import React, { useState, useEffect } from "react";
import { FaSearch } from "react-icons/fa";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../../backend/firebase/config";

const AlumniList = () => {
  const [alumniList, setAlumniList] = useState([]);
  const [selectedAlumni, setSelectedAlumni] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");

  const fetchData = async () => {
    let list = [];
    try {
      const querySnapshot = await getDocs(collection(db, "users"));
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        list.push({
          id: doc.id,
          avatar: data.img || "https://via.placeholder.com/50",
          name: `${data.firstname} ${data.lastname}`,
          passoutYear: data.batch,
          verified: data.verified || false,
        });
      });
      setAlumniList(list);
    } catch (e) {
      console.log(e);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleViewAlumni = (index) => {
    setSelectedAlumni(alumniList[index]);
  };

  const handleSearch = (event) => {
    setSearchTerm(event.target.value);
  };

  const filteredAlumni = alumniList.filter((alumnus) =>
    alumnus.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="min-h-screen bg-gray-100">
      <div
        className="relative bg-cover bg-center h-64"
        style={{
          backgroundImage:
            "url('https://upload.wikimedia.org/wikipedia/commons/0/06/Central_Stair_Case_of_GEC_Palakkad.png')",
        }}
      >
        <div className="absolute inset-0 bg-black opacity-50"></div>
        <div className="relative z-10 flex justify-center items-center h-full">
          <h1 className="text-white text-4xl font-bold">Alumni List</h1>
        </div>
      </div>

      <div className="flex justify-center items-center my-8">
        <div className="flex border rounded-lg overflow-hidden">
          <input
            type="text"
            placeholder="Search..."
            value={searchTerm}
            onChange={handleSearch}
            className="p-2 border-none outline-none"
          />
          <button className="p-2 bg-blue-500 text-white">
            <FaSearch className="h-6 w-6" />
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4">
        {filteredAlumni.map((alumnus, index) => (
          <div key={alumnus.id} className="bg-white p-4 rounded-lg shadow-md">
            <div className="flex items-center space-x-4">
              <img
                src={alumnus.avatar}
                alt={alumnus.name}
                className="w-12 h-12 rounded-full"
              />
              <div>
                <h2 className="text-lg font-semibold">{alumnus.name}</h2>
                <p className="text-gray-500">
                  Passout Year: {alumnus.passoutYear}
                </p>
                <p
                  className={`text-sm font-semibold ${
                    alumnus.verified ? "text-green-500" : "text-red-500"
                  }`}
                >
                  {alumnus.verified ? "Verified" : "Not Verified"}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default AlumniList;

// File: app/ui/contacts/items.js
import { IoHomeSharp } from "react-icons/io5";
import { IoIosMail } from "react-icons/io";
import { IoMdPhonePortrait } from "react-icons/io";
import { IoTimerOutline } from "react-icons/io5";

const data = [
  {
    icon: IoHomeSharp,
    name: "Visit",
    para: "GEC sreekrishnapuram, palakkad",
  },
  {
    icon: IoIosMail,
    name: "Mail",
    para: "Samplemail123@gmail.com",
  },
  {
    icon: IoMdPhonePortrait,
    name: "Call Us",
    para: "9072906576",
  },
  {
    icon: IoTimerOutline,
    name: "Work Hours",
    para: "Mon-Sat, 09.00 am-05.00 pm",
  },
];

export default data

// File: app/ui/contacts/page.tsx
import React from "react";
import { IoHomeSharp } from "react-icons/io5";
import data from "./items.js";

export default function form() {
  return (
    <div className="container mx-auto">
      <h1 className="text-4xl font-bold mt-8 mb-12 text-center">Contact Us</h1>
      <div className="md:flex space-x-10">
        <div className="space-y-10 w-full p-5 ml-14 ">
          {/* items */}
          {data.map((items, index) => (
            <div className="flex gap-4 hover:scale-95">
              <div className="border-2 border-black p-2 w-20 ">
                <items.icon className="w-8 h-10 ml-3" />
              </div>
              <div>
                <h1 className="font-bold text-2xl">{items.name}</h1>
                <p className="text-gray-500">{items.para}</p>
              </div>
            </div>
          ))}
        </div>
        {/* form */}
        <div className="w-full p-5">
          {/* Flex for larger screens, stack for smaller screens */}
          <div className="flex flex-col md:flex-row md:space-x-3">
            <input
              type="text"
              placeholder="First Name"
              className="border-2 border-black p-3 rounded-xl hover:scale-95 w-full md:w-auto"
            />
            <input
              type="text"
              placeholder="Last Name"
              className="border-2 border-black p-3 rounded-xl hover:scale-95 w-full md:w-auto mt-3 md:mt-0"
            />
          </div>

          {/* Same as above, but with additional margin-top for smaller screens */}
          <div className="flex flex-col md:flex-row md:space-x-3 mt-5">
            <input
              type="email"
              placeholder="Email"
              className="border-2 border-black p-3 rounded-xl hover:scale-95 w-full md:w-auto"
            />
            <input
              type="text"
              placeholder="Subject"
              className="border-2 border-black p-3 rounded-xl hover:scale-95 w-full md:w-auto mt-3 md:mt-0"
            />
          </div>

          {/* Ensure textarea also adjusts for screen size */}
          <div className="mt-5 hover:scale-95 md:mr-28">
            <textarea
              name="text"
              cols={50}
              rows={8}
              placeholder="Messages"
              className="border-2 border-black p-3 rounded-xl w-full"
            ></textarea>
          </div>

          {/* Button centered on smaller screens */}
          <div className="flex justify-center md:justify-start">
            <button className="mt-5 h-[50px] w-full md:w-[560px] bg-[#2686f3] p-2 rounded-xl text-white font-bold hover:scale-95">
              Send Message
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// File: app/ui/eventList/page.tsx
"use client";
import React, { useState, useEffect } from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../../backend/firebase/config";

const Events = () => {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      const querySnapshot = await getDocs(collection(db, "events"));
      const eventsList = [];
      querySnapshot.forEach((doc) => {
        eventsList.push({ id: doc.id, ...doc.data() });
      });
      setEvents(eventsList);
    };
    fetchEvents();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-4xl font-bold text-center mb-8">Event Gallery</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {events.map((event) => (
          <div key={event.id} className="border border-gray-300 p-4 m-4">
            <img
              src={event.bannerImage}
              alt={event.eventName}
              className="w-full h-48 object-cover mb-4"
            />
            <h2 className="text-2xl font-semibold mb-2">{event.eventName}</h2>
            <p className="text-gray-700 mb-2">
              <strong>Schedule:</strong> {event.schedule}
            </p>
            <p className="text-gray-700 mb-2">
              <strong>Description:</strong> {event.description}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Events;

// File: app/ui/gallery/page.jsx
"use client";
import React, { useEffect, useState } from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../../backend/firebase/config";

export default function Gallery() {
  const [gallery, setGallery] = useState([]);

  useEffect(() => {
    const fetchGallery = async () => {
      const querySnapshot = await getDocs(collection(db, "gallery"));
      const fetchedGallery = [];
      querySnapshot.forEach((doc) => {
        fetchedGallery.push(doc.data());
      });
      setGallery(fetchedGallery);
    };

    fetchGallery();
  }, []);

  return (
    <div className="container mx-auto">
      <h1 className="font-bold text-4xl my-5 text-center">Gallery</h1>
      <div className="grid md:grid-cols-2 gap-4">
        {gallery.map((item, index) => (
          <div key={index} className="m-4">
            <div className="w-full h-64">
              <img
                src={item.img}
                alt={item.galleryName}
                className="w-full h-full object-cover"
              />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// File: app/ui/homePage/page.tsx
"use client";
import React, { useEffect } from "react";
import Typed from "typed.js";
import AOS from "aos";
import "aos/dist/aos.css";
import Navbar from "../../components/homeNav/page";

const HomePage = () => {
  useEffect(() => {
    AOS.init({ duration: 2000 });

    // Initialize Typed.js
    const typed = new Typed(".typing-element", {
      strings: ["Welcome to Alumni Tracking System"],
      typeSpeed: 100, // Typing speed in milliseconds
      showCursor: true, // Display cursor while typing
      loop: true,
    });

    return () => {
     
      typed.destroy();
    };
  }, []);

  return (
    <div>
      <Navbar />

      <div className="relative h-screen overflow-hidden">
        <div className="absolute top-0 left-0 w-full h-full bg-cover bg-home z-0"></div>
        <div className="relative z-10 flex flex-col items-center justify-center h-full gap-4">
          <div data-aos="fade-left">
            <h1 className="text-center text-black text-5xl font-bold">
              <span className="typing-element"></span>
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HomePage;

// File: app/ui/postJob/page.tsx
"use client";
import { useState, useEffect } from "react";
import { getDatabase, ref, set } from "firebase/database";
import { database } from "../../backend/firebase/config";
import { v4 as uuidv4 } from "uuid";

const PostJob = () => {
  const [jobDetails, setJobDetails] = useState({
    companyName: "",
    aboutJob: "",
    jobRole: "",
    location: "",
    requiredSkill: "",
    courseSpecialization: "",
    salary: "",
    experience: "",
    contactInfo: "",
    companyWebsite: "",
    applyLink: "",
  });
  const [currentUserUID, setCurrentUserUID] = useState(null);

  useEffect(() => {
    const userFromStorage = JSON.parse(localStorage.getItem("user") || "null");
    if (userFromStorage) {
      setCurrentUserUID(userFromStorage.uid);
    }
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setJobDetails({ ...jobDetails, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (currentUserUID) {
      const jobId = uuidv4(); // Generate a unique ID for each job
      set(ref(database, `jobs/${currentUserUID}/${jobId}`), jobDetails)
        .then(() => {
          console.log("Job details added successfully");
        })
        .catch((error) => {
          console.error("Error adding job details: ", error);
        });

      setJobDetails({
        companyName: "",
        aboutJob: "",
        jobRole: "",
        location: "",
        requiredSkill: "",
        courseSpecialization: "",
        salary: "",
        experience: "",
        contactInfo: "",
        companyWebsite: "",
        applyLink: "",
      });
    }
  };
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100">
      <h2 className="text-4xl font-semibold mb-10 text-blue-500">
        Post a Job Opportunity
      </h2>
      <form
        onSubmit={handleSubmit}
        className="w-full max-w-4xl bg-white p-8 rounded shadow"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Company Name
              </label>
              <input
                type="text"
                name="companyName"
                value={jobDetails.companyName}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Company Website
              </label>
              <input
                type="url"
                name="companyWebsite"
                value={jobDetails.companyWebsite}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Job Role
              </label>
              <input
                type="text"
                name="jobRole"
                value={jobDetails.jobRole}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Experience (in Year)
              </label>
              <input
                type="text"
                name="experience"
                value={jobDetails.experience}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Location
              </label>
              <input
                type="text"
                name="location"
                value={jobDetails.location}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Salary Package
              </label>
              <input
                type="text"
                name="salary"
                value={jobDetails.salary}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
          </div>
          <div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Required Skills
              </label>
              <input
                type="text"
                name="requiredSkill"
                value={jobDetails.requiredSkill}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Course Specialization
              </label>
              <input
                type="text"
                name="courseSpecialization"
                value={jobDetails.courseSpecialization}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                About this Job
              </label>
              <textarea
                name="aboutJob"
                value={jobDetails.aboutJob}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full h-[120px]"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Contact Details
              </label>
              <input
                type="text"
                name="contactInfo"
                value={jobDetails.contactInfo}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Apply Link
              </label>
              <input
                type="url"
                name="applyLink"
                value={jobDetails.applyLink}
                onChange={handleChange}
                className="mt-1 p-2 border rounded w-full"
                required
              />
            </div>
          </div>
        </div>

        {/* Submit button */}
        <div className="flex justify-center mt-6">
          <button
            type="submit"
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-white border-blue-500 hover:text-blue-500 hover:border hover:rounded-md"
          >
            <h1 className="text-xl font-bold w-28">POST JOB</h1>
          </button>
        </div>
      </form>
    </div>
  );
};

export default PostJob;

// File: app/ui/profile/page.tsx
"use client";
import React, { useEffect, useRef, useState } from "react";
import { DocumentData, doc, getDoc, setDoc } from "firebase/firestore";
import { db, storage } from "../../backend/firebase/config";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";

type FormData = {
  firstname: string;
  lastname: string;
  email: string;
  phone: string;
  dateOfBirth: string;
  batch: string;
  connectedTo: string;
  address: string;
  img: string;
};

function Profile() {
  const [photoPreview, setPhotoPreview] = useState<string | null>(null); // Explicitly typed as string | null
  const fileInputRef = useRef<HTMLInputElement>(null); // Ref is explicitly typed
  const [showUpdateButton, setShowUpdateButton] = useState(false);

  useEffect(() => {
    const userFromStorage = JSON.parse(localStorage.getItem("user") || "null");

    if (userFromStorage && userFromStorage.imageUrl) {
      setPhotoPreview(userFromStorage.imageUrl);
    }
  }, []);
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const fileInput = e.target.files?.[0];
    if (fileInput) {
      setFile(fileInput);
    }
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageUrl = e.target?.result as string;
        setPhotoPreview(imageUrl);
        setShowSubmitButton(true); // Assuming setUserProfile updates the user's profile with imageUrl
      };
      reader.readAsDataURL(file);
    }
  };

  const [user, setUser] = useState<any>(null);
  const [singleDoc, setSingleDoc] = useState<DocumentData | null>(null);
  const [formData, setFormData] = useState<FormData>({
    firstname: "",
    lastname: "",
    email: "",
    phone: "",
    dateOfBirth: "",
    batch: "",
    connectedTo: "",
    address: "",
    img: "",
  });
  const [showSubmitButton, setShowSubmitButton] = useState(false);
  const [file, setFile] = useState(null);
  const [per, setPerc] = useState(null);

  useEffect(() => {
    const userFromStorage = JSON.parse(localStorage.getItem("user") || "null");
    setUser(userFromStorage);

    if (userFromStorage) {
      const fetchUserData = async () => {
        try {
          const userDocRef = doc(db, "users", userFromStorage.uid);
          const userDoc = await getDoc(userDocRef);

          if (userDoc.exists()) {
            setSingleDoc(userDoc.data());
            setFormData(userDoc.data() as FormData);
            console.log(userDoc.data());
          } else {
            console.log("No such document!");
          }
        } catch (error) {
          console.error("Error fetching user data:", error);
        }
      };

      fetchUserData();
    }
    const uploadFile = () => {
      if (file) {
        const fileName = new Date().getTime() + file.name;
        console.log(fileName);
        const storageRef = ref(storage, fileName);
        const uploadTask = uploadBytesResumable(storageRef, file);

        uploadTask.on(
          "state_changed",
          (snapshot) => {
            const progress =
              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
            setPerc(progress);
            switch (snapshot.state) {
              case "paused":
                console.log("Upload is paused");
                break;
              case "running":
                console.log("Upload is running");
                break;
              default:
                break;
            }
          },
          (error) => {
            console.error(error);
          },
          () => {
            getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
              setFormData((prev) => ({ ...prev, img: downloadURL }));
              console.log("File available at", downloadURL);
              setShowSubmitButton(true);
            });
          }
        );
      }
    };

    if (file) {
      uploadFile();
    }
  }, [file]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
    setShowSubmitButton(true); // Show the submit button when form data changes
  };

  const handleCancel = () => {
    setFormData(singleDoc as FormData);
    setShowSubmitButton(false);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (user) {
      try {
        const userDocRef = doc(db, "users", user.uid);
        await setDoc(userDocRef, formData, { merge: true });
        alert("Profile updated successfully!");
        setShowSubmitButton(false);
      } catch (e) {
        console.error(e);
        alert("Failed to update profile. Please try again.");
      }
    } else {
      alert("No user is logged in.");
    }
  };

  return (
    <div className="flex container mx-auto p-3 space-x-14 text-white flex-col md:flex-row">
      {/* 

        profile Icon Component 

      */}
      <div className="bg-gray-600 max-h-[720px] overflow-y-hidded sm:h-auto ml-14 rounded-xl my-3">
        <div className="flex flex-col justify-center items-center text-center p-2 text-white">
          <input
            type="file"
            className="hidden"
            ref={fileInputRef}
            onChange={(e) => {
              setFile(e.target.files[0]);
              handleFileChange;
            }}
          />
          <div className="text-center flex flex-col items-center mt-8">
            {/* Profile Photo Preview */}
            <div className="mt-2 w-40 h-40 rounded-full bg-gray-200 flex items-center justify-center border-2 border-gray-400">
              {photoPreview ? (
                <div
                  className="w-40 h-40 rounded-full"
                  style={{
                    backgroundImage: `url(${photoPreview})`,
                    backgroundSize: "cover",
                    backgroundPosition: "center",
                  }}
                />
              ) : formData.img ? (
                <div
                  className="w-40 h-40 rounded-full"
                  style={{
                    backgroundImage: `url(${formData.img})`,
                    backgroundSize: "cover",
                    backgroundPosition: "center",
                  }}
                />
              ) : (
                <span className="text-black">No Image</span>
              )}
            </div>

            <h1 className="mt-5 text-4xl font-bold mb-3 ">
              {formData.firstname.toUpperCase() +
                " " +
                formData.lastname.toUpperCase()}
            </h1>
            <p className="text-xl">
              Hi, I am student of Govt.Engineering College <br />
              Sreekrishnapuram, Palakkad
            </p>
            <div className="mt-10">
              <div className="flex flex-row justify-center items-center gap-3 ">
                <button
                  className="p-2 bg-blue-600  text-white rounded-lg hover:scale-95"
                  onClick={() => fileInputRef.current?.click()}
                >
                  Update Profile Image
                </button>

                <button className="p-2 bg-blue-600  text-white rounded-lg hover:scale-95">
                  Change Password
                </button>
                <button className="p-2 bg-blue-600  text-white rounded-lg hover:scale-95">
                  Delete Account
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* 

        profile Form Component 

      */}
      <div className="">
        <form
          className="w-[800px] mx-auto p-6 bg-[#c0c2c8] shadow-md my-3 rounded-lg overflow-y-hidded max-h-[720px] sm:h-auto"
          onSubmit={handleSubmit}
        >
          <h2 className="text-3xl font-semibold mb-6 text-gray-800 text-center">
            Personal Details
          </h2>

          {/* First and Last Name */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-black">
            <div>
              <label className="block text-gray-700 mb-2" htmlFor="firstname">
                First Name
              </label>
              <input
                type="text"
                id="firstname"
                name="firstname"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.firstname}
                onChange={handleChange}
                required
              />
            </div>
            <div>
              <label className="block text-gray-700 mb-2" htmlFor="lastname">
                Last Name
              </label>
              <input
                type="text"
                id="lastname"
                name="lastname"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.lastname}
                onChange={handleChange}
                required
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-black">
            {/* Email */}
            <div className="mt-4 text-black">
              <label className="block text-gray-700 mb-2" htmlFor="email">
                Email
              </label>
              <input
                type="email"
                id="email"
                name="email"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.email}
                onChange={handleChange}
                required
              />
            </div>

            {/* Phone */}
            <div className="mt-4 text-black">
              <label className="block text-gray-700 mb-2" htmlFor="phone">
                Phone
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.phone}
                onChange={handleChange}
                required
              />
            </div>
          </div>
          {/* Address */}
          <div className="mt-4 text-black">
            <label className="block text-gray-700 mb-2" htmlFor="address">
              Address
            </label>
            <textarea
              id="address"
              name="address"
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.address}
              onChange={handleChange}
              rows={3}
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-black">
            {/* Date of Birth */}
            <div className="mt-4 text-black">
              <label className="block text-gray-700 mb-2" htmlFor="dateOfBirth">
                Date of Birth
              </label>
              <input
                type="date"
                id="dateOfBirth"
                name="dateOfBirth"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.dateOfBirth}
                onChange={handleChange}
                required
              />
            </div>

            {/* Pass-Out Year */}
            <div className="mt-4 text-black">
              <label className="block text-gray-700 mb-2" htmlFor="batch">
                Pass-Out Year
              </label>
              <input
                type="number"
                id="batch"
                name="batch"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.batch}
                onChange={handleChange}
                required
              />
            </div>
          </div>
          {/* Skills */}
          <div className="mt-4 text-black">
            <label className="block text-gray-700 mb-2" htmlFor="connectedTo">
              Skills
            </label>
            <textarea
              id="connectedTo"
              name="connectedTo"
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.connectedTo}
              onChange={handleChange}
              rows={3}
            />
          </div>

          {/* Submit Button */}
          <div className="text-center mt-6">
            {showSubmitButton && (
              <div>
                <button
                  type="button"
                  onClick={handleCancel}
                  className="px-6 mx-2 py-2 border-2 border-blue-500 bg-white text-black hover:text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  cancel
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 mx-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  update
                </button>
              </div>
            )}
          </div>
        </form>
      </div>
    </div>
  );
}

export default Profile;

// File: app/ui/servicess/data.js
import { RiGraduationCapFill } from "react-icons/ri";
import { IoNotificationsSharp } from "react-icons/io5";
import { FaUserFriends } from "react-icons/fa";
import { RiAdminFill } from "react-icons/ri";
import { MdLibraryAddCheck } from "react-icons/md";
import { TbBulbFilled } from "react-icons/tb";

const data = [
  {
    icon: RiGraduationCapFill,
    name: "College Events",
    para: "You can get the latest update of college events",
  },
  {
    icon: IoNotificationsSharp,
    name: "Job notification",
    para: "You can find the job notification",
  },
  {
    icon: FaUserFriends,
    name: "Connect with Friends",
    para: "You can able to connect with your college friends over here",
  },
  {
    icon: RiAdminFill,
    name: "Admin Panal",
    para: "The website provide an admin panel.",
  },
  {
    icon: MdLibraryAddCheck,
    name: "Only Verified Alumni",
    para: "In this website only verified user are allowed. verificarion is done by admin.",
  },
  {
    icon: TbBulbFilled,
    name: "Ideas",
    para: "Alumni can share own views about new technology to others",
  },
];

export default data;

// File: app/ui/servicess/page.tsx
import React from "react";
import { RiGraduationCapFill } from "react-icons/ri";
import data from "./data.js";

export default function Service() {
  return (
    <div className="text-white bg-[#0b133d] min-h-screen">
      <div className="container mx-auto">
        <h1 className="text-5xl font-bold pt-14 hover:text-blue-400 text-center">
          Our Services
        </h1>

        <div className="mt-12 p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {data.map((service, index) => (
            <div
              key={index}
              className="border-2 border-[#0b133d] p-4 h-80 pt-10 flex flex-col justify-center items-center text-center hover:scale-95 rounded-xl"
            >
              <div className="rounded-full bg-[#2751d8] p-2 w-20 h-20 border-4 border-white mb-2">
                <service.icon className="w-10 h-10 ml-2 mt-2" />
              </div>
              <span className="w-1 h-14 bg-white mt-1"></span>
              <div className="mb-2">
                <h2 className="text-3xl font-bold mt-5">{service.name}</h2>
                <p className="mt-5 text-lg">{service.para}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// File: app/ui/viewJob/page.tsx
"use client";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPenToSquare } from "@fortawesome/free-regular-svg-icons";
import { database } from "../../backend/firebase/config";
import {
  faTrashCan,
  faBriefcase,
  faLocationDot,
  faCode,
  faAddressCard,
  faCreditCard,
  faPhone,
  faRankingStar,
} from "@fortawesome/free-solid-svg-icons";

import data from "../../constants/jobData";
import { useState, useEffect } from "react";
import { getDatabase, ref, onValue, remove, update } from "firebase/database";
import EditJobPopup from "../../components/adminJobs/EditJobPopup";

const JobDetails = () => {
  const [jobs, setJobs] = useState([]);
  const [currentUserUID, setCurrentUserUID] = useState(null);
  const [editingJob, setEditingJob] = useState(null);

  useEffect(() => {
    const userFromStorage = JSON.parse(localStorage.getItem("user") || "null");
    if (userFromStorage) {
      setCurrentUserUID(userFromStorage.uid);
    }
  }, []);

  useEffect(() => {
    const jobsRef = ref(database, "jobs");
    onValue(jobsRef, (snapshot) => {
      const data = snapshot.val();
      const allJobs = [];
      for (const userId in data) {
        for (const jobId in data[userId]) {
          allJobs.push({
            id: jobId,
            userId: userId,
            ...data[userId][jobId],
          });
        }
      }
      setJobs(allJobs);
    });
  }, []);

  const handleDelete = (userId, jobId) => {
    const jobRef = ref(database, `jobs/${userId}/${jobId}`);
    remove(jobRef)
      .then(() => {
        console.log("Job deleted successfully");
      })
      .catch((error) => {
        console.error("Error deleting job: ", error);
      });
  };

  const handleEdit = (job) => {
    setEditingJob(job);
  };

  const handleSave = (updatedJob) => {
    const jobRef = ref(database, `jobs/${updatedJob.userId}/${updatedJob.id}`);
    update(jobRef, updatedJob)
      .then(() => {
        console.log("Job updated successfully");
      })
      .catch((error) => {
        console.error("Error updating job: ", error);
      });
  };

  const handleClose = () => {
    setEditingJob(null);
  };

  const capitalizeEachWord = (str) => {
    return str.toUpperCase();
  };

  return (
    <div className="bg-[#edeced] pt-4 flex flex-col justify-center items-center text-center h-auto ">
      <h1 className="text-3xl font-bold mb-5 w-auto">Available Jobs</h1>
      <div className="container flex flex-row justify-center items-center">
        {jobs.map((job) => (
          <div
            key={job.id}
            className=" w-auto sm:w-1/2 md:w-1/3 lg:w-1/3 h-auto bg-white p-5 rounded-lg mx-2 my-2"
          >
            <h1 className="text-2xl font-extrabold mb-4 text-center">
              Company Name:
              <span className="font-normal">
                {" " + capitalizeEachWord(job.companyName)}
              </span>
            </h1>
            <hr className="mb-4" />
            <p className="text-lg font-bold mb-3">
              About Job:
              <span className="font-normal">{" " + job.aboutJob}</span>
            </p>
            <hr className="mb-3" />
            <hr className="mb-3" />
            <div className="mb-3">
              <p className="text-lg font-bold flex items-center">
                <FontAwesomeIcon
                  icon={faBriefcase}
                  className="w-4 h-4 text-blue-700 mr-1"
                />
                Job Role:
                <span className="font-normal">
                  {" " + capitalizeEachWord(job.jobRole)}
                </span>
              </p>
              <p className="text-lg font-bold flex items-center">
                <FontAwesomeIcon
                  icon={faLocationDot}
                  className="w-4 h-4 text-blue-700 mr-1"
                />
                Location:
                <span className="font-normal">
                  {" " + capitalizeEachWord(job.location)}
                </span>
              </p>
              <p className="text-lg font-bold flex items-center">
                <FontAwesomeIcon
                  icon={faCode}
                  className="w-6 h-6 text-blue-700 mr-1"
                />
                Required_Skill:
                <span className="font-normal capitalize">
                  {" " + job.requiredSkill}
                </span>
              </p>
              <p className="text-lg font-bold flex items-center">
                <FontAwesomeIcon
                  icon={faAddressCard}
                  className="w-4 h-4 text-blue-700 mr-1"
                />
                Course_Specialization:
                <span className="font-normal ">
                  {" " + job.courseSpecialization}
                </span>
              </p>
              <p className="text-lg font-bold flex items-center">
                <FontAwesomeIcon
                  icon={faCreditCard}
                  className="w-4 h-4 text-blue-700 mr-1"
                />
                Salary:
                <span className="font-normal">{" " + job.salary}</span>
              </p>
              <p className="text-lg font-bold flex items-center">
                <FontAwesomeIcon
                  icon={faRankingStar}
                  className="w-4 h-4 text-blue-700 mr-1"
                />
                Experience:
                <span className="font-normal">
                  {" " + capitalizeEachWord(job.experience)}
                </span>
              </p>
              <p className="text-lg font-bold flex items-center">
                <FontAwesomeIcon
                  icon={faPhone}
                  className="w-4 h-4 text-blue-700 mr-1"
                />
                Contact_Info:
                <span className="font-normal">{" " + job.contactInfo}</span>
              </p>
            </div>
            {currentUserUID !== job.userId ? (
              <>
                <div className="lg:flex flex-row items-center gap-4">
                  <a
                    href={job.companyWebsite}
                    className="bg-blue-700 px-3 py-2 h-10 rounded-lg text-white font-bold hover:border-blue-800 border-2 hover:bg-white hover:text-blue-700 "
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    Company Website
                  </a>
                  <button className="border-2 border-blue-800 p-1 h-10 w-20 rounded-lg hover:bg-blue-800 hover:text-white text-blue-700">
                    <h2 className="font-bold">Apply</h2>
                  </button>
                </div>
              </>
            ) : (
              <div className="lg:flex flex-row items-center gap-4">
                <button
                  className="hover:border-2 hover:border-blue-800 p-1 h-10 w-24 rounded-lg bg-blue-800 hover:bg-white text-white  hover:text-[15px] hover:scale-95 hover:text-blue-700 flex items-center justify-evenly"
                  onClick={() => handleEdit(job)}
                >
                  <FontAwesomeIcon icon={faPenToSquare} className="w-6 h-6" />
                  <h2 className="font-bold">Edit</h2>
                </button>
                <button
                  className="border-2 border-blue-800 p-1 h-10 w-24 rounded-lg hover:bg-blue-800 hover:text-white hover:text-[15px] hover:scale-95 text-blue-700 flex items-center justify-evenly"
                  onClick={() => handleDelete(job.userId, job.id)}
                >
                  <FontAwesomeIcon icon={faTrashCan} className="w-6 h-6" />
                  <h2 className="font-bold">Delete</h2>
                </button>
              </div>
            )}
          </div>
        ))}
        {editingJob && (
          <EditJobPopup
            job={editingJob}
            onClose={handleClose}
            onSave={handleSave}
          />
        )}
      </div>
    </div>
  );
};

export default JobDetails;

// File: app/ui/welcome/page.tsx
"use client";
import React, { useEffect } from "react";
import Typed from "typed.js";
import AOS from "aos";
import "aos/dist/aos.css";
import Navbar from "../../components/navbar/page";

const Welcome = () => {
  useEffect(() => {
    AOS.init({ duration: 2000 });

    // Initialize Typed.js
    const typed = new Typed(".typing-element", {
      strings: ["The Group of GECP presents"],
      typeSpeed: 100, // Typing speed in milliseconds
      showCursor: true, // Display cursor while typing
      loop: true,
    });

    return () => {
      // Destroy Typed.js instance on component unmount
      typed.destroy();
    };
  }, []);

  return (
    <div>
      <Navbar />

      <div className="relative h-screen overflow-hidden">
        <div className="absolute top-0 left-0 w-full h-full bg-cover bg-welcome z-0"></div>
        <div className="relative z-10 flex flex-col items-center justify-center h-full gap-4">
          <div data-aos="fade-right">
            <h1 className="text-center text-white text-2xl mb-8 font-mono">
              Stay Connected With..
            </h1>
          </div>
          <div data-aos="fade-left">
            {/* Use a span with a class for Typed.js to target */}
            <h1 className="text-center text-white text-5xl font-bold">
              <span className="typing-element"></span>
            </h1>
          </div>
          <div
            className="bg-blue-800 p-3 rounded-md mt-8"
            data-aos="zoom-in-up"
          >
            <h1 className="text-center text-white text-2xl font-medium">
              OUR GOAL IS TO CONNECT EVERYONE
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Welcome;

